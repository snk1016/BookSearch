apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

bintray {
    user = BINTRAY_USER
    key = BINTRAY_API_KEY

    configurations = ['archives']

    publish = true

    pkg {
        repo = BINTRAY_REPOSITORY
        name = GROUP_ID
        licenses = ['Apache-2.0']
        websiteUrl = GITHUB_URL
        issueTrackerUrl = "${GITHUB_URL}/issues"
        vcsUrl = "${GITHUB_URL}.git"
        githubRepo = GITHUB_REPOSITORY
        githubReleaseNotesFile = 'CONTRIBUTING.md'

        version {
            name = SDK_VERSION
            vcsTag = SDK_VERSION
            released = new Date()
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.project {
            name SDK_NAME
            description SDK_DESCRIPTION
            url GITHUB_URL
            inceptionYear SDK_DEPLOY_YEAR

            packaging 'aar'
            groupId GROUP_ID
            artifactId SDK_NAME
            version SDK_VERSION

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection "${GITHUB_URL}.git"
                url GITHUB_URL

            }
            developers {
                developer {
                    id DEVELOPER_ID
                    name DEVELOPER_NAME
                    email DEVELOPER_EMAIL
                }
            }
        }
    }
}

tasks.withType(Javadoc).all {
    enabled = false
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName SDK_VERSION

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
        // Neccesary for Dagger
        incremental = false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:${ANDROIDX_APP_COMPAT_VERSION}"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    compileOnly "com.google.firebase:firebase-messaging:${FIREBASE_PUSH_MESSAGING_VERSION}"

    implementation 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'

    implementation 'com.google.android.gms:play-services-tasks:17.0.0'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'com.android.volley:volley:1.1.1'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.6.3'
}

// JCenter publish
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// Optional docs
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// Optional javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar // Optional
    archives sourcesJar
}

task findConventions {
    doLast {
        println project.getConvention()
    }
}
